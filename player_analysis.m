%% Player Analysis
% Purpose: Take player data and provide analysis to players and staff

%% Start clean

% Clear all variables in the base workspace
clear

% Close all figure windows that may be open
close all;

% Clear the command window (another open is using 'home')
clc

% Start a timer
tic

% Start a dialog box / progress bar to track progress throughout
f = uifigure;
d = uiprogressdlg(f, 'Title', 'Please Wait', 'Message', 'Starting...');

% References for this section:
% web(fullfile(docroot, 'matlab/ref/uiprogressdlg.html'))

%% Import Data
% This imports one file for analysis, but it is possible to automate the
% analysis of multiple files.

% Specify the file to import data from
filename = 'C:\Users\david\googledrive\MATLAB\soccer\match_data1.csv';

% Specify what rows to import
row_start = 2;
row_end = 2000;

% Update the progress bar
d.Value = 0.1;
d.Message = 'Importing data';
pause(.1)

% Call the function importfile() (auto-generated by the import tool)
data = importfile(filename, [row_start, row_end]);

% Variables in the table, 'data':
% (units and datatype are included, if possible)
%
% data.id = player id, double
% data.name = player name, categorical
% data.session = session id, double
% data.t = time (HH:mm:ss.SS), datetime (was originally string)
% data.t_elapsed = elapsed time, double
% data.speed = speed (m/s), double
% data.a_impulse = instantaneous acceleration impulse, double
% data.hr_interval = heart rate interval, double
% data.lat = latitude, double
% data.lon = longitude, double
% data.ax = acceleration in the +x direction (see axes.png)
% data.ay = acceleration in the +y direction (see axes.png)
% data.az = acceleration in the +z direction (see axes.png)
% data.gx = gyro x
% data.gy = gyro y
% data.gz = gyro z
% data.h_acc =
% data.h_dop =
% data.signal_quality = gps signal quality?
% data.num_sat = number of satellites
%
% References for this section:
% web(fullfile(docroot, 'matlab/import_export/select-spreadsheet-data-interactively.html'))

%% Data Management

% Update the progress bar
d.Value = 0.2;
d.Message = 'Formating data';
pause(.1)

% Convert the time data from a 'string array' to 'datatime' data type
data.t = datetime(data.t, 'InputFormat', 'HH:mm:ss.SS', 'Format', 'HH:mm:ss.SS');

%% Calculate vertical velocity

% Setup
s = row_end - row_start; % this will be the number of times through the loop
r = 100; % number of rows processed between updates to the progress bar

% Preallocating memory for the following loop
data.v = zeros(row_end-1, 1);
data.t2 = NaT(row_end-1, 1, 'Format',  'HH:mm:ss.SS');

for i = 1:s
    
    if rem(i,r) == 0
        % Update the progress bar
        d.Value = 0.2 + 0.7*i/s;
        d.Message = 'Integrating...';
    end
    
    % Compute the numerical integration
    data.v(i+1) = trapz(data.ay(i:i+1));
    
end

%% Find the take-off points

% Setup
h = 20;                     % this will look for at most h jumps
vh = maxk(data.v,h);        % finds the h highest velocities
vh = vh(vh > mean(vh));
rng = 5;                    % look for sign change rng sec before/after j

% Preallocate memory for the following loop
toff = NaT(length(vh), 1, 'Format', 'HH:mm:ss.SS');
a = NaN(length(vh),1);

for i = 1:length(vh)
    j = find(data.v == vh(i)); % finds the index of the ith velocity
    a(i) = data.ay(data.v == vh(i)); % finds the accel. associated with ith vel.
    
    if a(i) >= 0.1
        % Look for a sign change in accel. around j
        for k = j-rng:j+rng
            if sign(data.ay(k)) ~= sign(data.ay(k+1))
                if abs(data.ay(k)) < abs(data.ay(k+1))
                    a(i) = data.ay(k);
                    toff(i) = data.t(k);
                    break
                else
                    a(i) = data.ay(k+1);
                    toff(i) = data.t(k+1);
                    break
                end
            end
        end
    else
        toff(i) = data.t(j); % captures time if a(j) is nearly zero
    end
end

% Combine desired data into a separate table
possible_jumps = table(toff, a, vh, 'VariableNames', {'takeoff', 'acceleration', 'velocity'});

% Sort and Clean up the table
for j = 1:size(possible_jumps,1)
    possible_jumps = sortrows(possible_jumps,{'takeoff'});
    for i = 1:(size(possible_jumps,1)-1)
        if (possible_jumps.takeoff(i+1) - possible_jumps.takeoff(i)) < 1
            if possible_jumps.velocity(i) < possible_jumps.velocity(i+1)
                possible_jumps.takeoff(i) = NaT;
            end
        end
    end
end

% Display the table in the workspace
disp('Possible Jumps...')
disp(possible_jumps)
disp('Acceleration should be nearly 0 where velocity is near maximum.')
disp(' ')

%% Visualize the data

figure % opens a figure window


% Plot time vs acceleration in the y 
subplot(2,1,1)
plot(data.t,-data.ay)
ylabel('Acceleration')
grid on
title('Accel. and Velocity vs Time, (displayed positive up)')

% Plot time vs velocity in the y (positive
subplot(2,1,2)
plot(data.t,-data.v)
ylabel('velocity')
xlabel('time')
grid on

% Show the current graph (just in case it opens in the background)
shg

%% Save
save data.mat data
save results.mat possible_jumps
savefig('data_figure')

%% Clean up

% Close the progress dialog
close(d);

clear a d filename h i j k r rng row_end row_start s toff vh

% Display script run time
disp('Analysis total run time...')
toc