%% Player Analysis
% Purpose: Take player data and provide analysis to players and staff

%% Start clean

% Clear all variables in the base workspace
clear

% Close all figure windows that may be open
close all;

% Clear the command window (another open is using 'home')
clc

%% Inputs
timer = false; % if true, times the entire analysis
progress_bar = false; % if true, displays a progress bar / dialog box
visualize = false; % if true, displays plots / graphs
record = false; % if true, saves imported data, results and figure(s)

%% Setup
% Start a timer
if timer
    tic
end



% References for this section:
% web(fullfile(docroot, 'matlab/ref/uiprogressdlg.html'))

%% Import Data


% This imports one file for analysis, but it is possible to automate the
% analysis of multiple files.

% Specify the file to import data from

filename = 'C:\Users\david\googledrive\MATLAB\soccer\match_data1.csv';
filename_mac = '/Users/ashmeetanand/Desktop/Sounders/Jump_raw_data/Match data 1.csv';
if ~ispc
    filename = filename_mac;
end

% Specify what rows to import
row_start_min = 2;
row_end_final = Inf; % to continue until end of file, use Inf
chunk = 10000;
count = 0; % for tracking progress and saving data to sheets


for row_start = row_start_min:chunk:row_end_final
    
    count = count + 1
    row_end = row_start + chunk;
    
    if progress_bar
        % Start a dialog box / progress bar to track progress throughout
        f = uifigure;
        d = uiprogressdlg(f, 'Title', 'Please Wait', 'Message', 'Starting...');
    end
    
    if progress_bar
        % Update the progress bar
        d.Value = 0.1;
        d.Message = 'Importing data';
        pause(.1)
    end
    
    clear data
    % Call the function importfile() (auto-generated by the import tool)
    if ispc
        data = importfile(filename, [row_start, row_end]);
    else
        data = importfile_mac(filename, row_start, row_end);
    end
    data.ay = -1 * data.ay; % correction so y is positive up, like axes.png
    
    % Variables in the table, 'data':
    % (units and datatype are included, if possible)
    %
    % data.id = player id, double
    % data.name = player name, categorical
    % data.session = session id, double
    % data.t = time (HH:mm:ss.SS), datetime (was originally string)
    % data.t_elapsed = elapsed time, double
    % data.speed = speed (m/s), double
    % data.a_impulse = instantaneous acceleration impulse, double
    % data.hr_interval = heart rate interval, double
    % data.lat = latitude, double
    % data.lon = longitude, double
    % data.ax = acceleration in the +x direction (see axes.png)
    % data.ay = acceleration in the +y direction (see axes.png)
    % data.az = acceleration in the +z direction (see axes.png)
    % data.gx = gyro x
    % data.gy = gyro y
    % data.gz = gyro z
    % data.h_acc =
    % data.h_dop =
    % data.signal_quality = gps signal quality?
    % data.num_sat = number of satellites
    %
    % References for this section:
    % web(fullfile(docroot, 'matlab/import_export/select-spreadsheet-data-interactively.html'))
    
    %% Data Management
    
    if progress_bar
        % Update the progress bar
        d.Value = 0.2;
        d.Message = 'Formating data';
        pause(.1)
    end
    
    % Convert the time data from a 'string array' to 'datatime' data type
    data.t = datetime(data.t, 'InputFormat', 'HH:mm:ss.SS', 'Format', 'HH:mm:ss.SS');
    
    %% Calculate vertical velocity
    
    % Setup
    s = row_end - row_start; % this will be the number of times through the loop
    r = 100; % number of rows processed between updates to the progress bar
    
    % Preallocating memory for the following loop
    data.v = zeros(length(data.t), 1);
    
    for i = 1:s
        
        if progress_bar
            if rem(i,r) == 0
                % Update the progress bar
                d.Value = 0.2 + 0.7*i/s;
                d.Message = 'Integrating...';
            end
        end
        
        % Compute the numerical integration
        data.v(i+1) = trapz(data.ay(i:i+1));
        
    end
    
    
    %% Find the take-off points
    
    % Setup
    
    % Define required variables for takeoff determination
    h = 10;                     % this will look for at most h jumps
    rng = 5;                    % look for sign change rng before/after j
    
    if ispc
        vh = maxk(data.v,h);        % finds the h highest velocities
    else
        vh = maxk_mac(data.v,h);    % there is no maxk on matlab for mac
    end
    
    interval = 1;
    
    % Define required variables for landing determination
    m = length(vh); % this will look for at most m landings
    min_air_time = 0.1;
    max_air_time = 1;
    
    % Preallocate memory for the following loop
    toff = NaT(length(vh), 1, 'Format', 'HH:mm:ss.SS'); % NaT = Not a Time
    at = NaN(length(vh),1); % NaN = Not a Number
    vm = zeros(m,1);
    al = zeros(m,1);
    jl = zeros(m,1);
    landtime = NaT(length(vm), 1, 'Format', 'HH:mm:ss.SS');
    height = zeros(m,1);
    t = zeros(m,1);
    
    
    for i = 1:length(vh)
        
        % Determine any possible takeoff times
        jtoff = find(data.v > min(vh));
        %j = find(data.v == vh(i)); % finds the index of the ith velocity
        at(i) = data.ay(jtoff(i)); % finds the accel. associated with ith
        % velocity
        
        if at(i) >= 0.1
            % Look for a sign change in acceleration
            for k = jtoff(i)-rng:jtoff(i)+rng
                if sign(data.ay(k)) ~= sign(data.ay(k+1))
                    if abs(data.ay(k)) < abs(data.ay(k+1))
                        at(i) = data.ay(k);
                        toff(i) = data.t(k);
                        j = k;
                        break
                    else
                        at(i) = data.ay(k+1);
                        toff(i) = data.t(k+1);
                        j = k;
                        break
                    end
                end
            end
        else
            % If a is nearly zero, get capture that time as the takeoff time
            toff(i) = data.t(j)
        end
        
        % Disregard a possible takeoff time if it is within 'interval' seconds of
        % the previous takeoff time
        for b = 1:length(toff)-1
            if toff(b+1) - toff(b) < duration(0, 0, interval)
                toff(b+1) = NaT;
            end
        end
        
        % Determine associated land times
        if toff(i) ~= NaT
            % Get the indicies for time greater than the current takeoff time plus
            % the minimum air time, but less than the takeoff plus max air time
            indices = find((data.t >= (toff(i) + duration(0, 0, min_air_time))) &...
                (data.t <= (toff(i) + duration(0, 0, max_air_time))));
            
            % Get the minimum velocity for the desired indicies
            vmin = mink(data.v(indices), 1); % 1 means looking for 1 min value
            
            if isempty(vmin)
                break
            else
                vm(i) = vmin; % keep track of all the vmins in vm
                
                % Index of the land time is index of the shortest possible
                % jump, plus the index of vmin within the jump window
                jland = find(data.t == (toff(i) + duration(0,0,min_air_time)))...
                    + find(data.v(indices) == vm(i));
                jl(i) = jland;
                % Get the indicies of accel. where velocity is equal to the
                % minimum
                al(i) = data.ay(jl(i));
                
                % If the acceleration value is not small, look for a sign change
                if abs(al(i)) >= 0.1
                    % Look for a sign change
                    for k = jl(i)-rng:jl(i)+rng
                        if sign(data.ay(k)) ~= sign(data.ay(k+1))
                            if abs(data.ay(k)) < abs(data.ay(k+1))
                                al(i) = data.ay(k);
                                landtime(i) = data.t(k);
                                jland = k;
                                break
                            else
                                al(i) = data.ay(k+1);
                                landtime(i) = data.t(k+1);
                                jland = k;
                                break
                            end
                        end
                    end
                else
                    % If the acceleration value is small, just pick it as
                    % the land time and keep the accel. value from above
                    landtime(i) = data.t(jland);
                end
            end
        end
        
        % Calculate flight time and height of jump
        
        t(i) = landtime(i).Second - toff(i).Second;
        if t(i) > 0
            % Calculate jump height
            % This assumes accel. data is in m/s^2
            height(i) = 0.5 * 9.81 * (t(i)/2)^2;
        end
        
    end
    
    
    
    E = table(toff, landtime, t, height,'VariableNames',...
        {'takeoff','land','airtime','height'});
    
    E = sortrows(E,{'takeoff'}); % Sort the table
    
    if E.takeoff(1) == NaT
        fprintf('No jumps found between row %i and %i\n', row_start, row_end);
    else
        
        keep = ~isnat(E.takeoff); % only keep rows that have actual times
        
        E = table(E.takeoff(keep), E.land(keep), E.airtime(keep), E.height(keep), ...
            'VariableNames', {'takeoff','land','airtime','height'});
    end
    
    
    %% Visualize the data
    
    if visualize
        figure % opens a figure window
        
        % Plot time vs acceleration in the y
        subplot(2,1,1)
        plot(data.t, data.ay)
        ylabel('Acceleration')
        grid on
        title('Accel. and Velocity vs Time, (displayed positive up)')
        
        % Plot time vs velocity in the y (positive
        subplot(2,1,2)
        plot(data.t, data.v)
        ylabel('velocity')
        xlabel('time')
        grid on
        
        % Show the current graph (just in case it opens in the background)
        shg
    end
    
    %% Save
    if record
        %save data
        %save E
        writetable(E,...
            'C:\Users\david\googledrive\MATLAB\soccer\player_analysis\results.xlsx',...
            'Sheet', count, 'Range', 'A1')
        if visualize
            savefig('data_figure')
        end
    end
    
    %% Clean up
    
    if progress_bar
        % Close the progress dialog
        close(d);
    end
    
    clearvars -except progress_bar visualize record timer filename chunk ...
        count
end % ends the overarching for loop the loops through all the data

%clear a d filename h i j k r rng row_end row_start s toff vh

disp('Analysis complete.')

% Display script run time
if timer
    toc
end