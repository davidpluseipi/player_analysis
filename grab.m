%% Grab
%
% Filename: grab.m
% Created: 2020-5-23
% By: David Meissner
% Copyright 2020
%
%% Description:
% This script is called by player_analysis2.m
% There is one loop to grab all the data in a desired file and 
% sort it by player, and a nested function at the bottom for importing the
% data.
%
%%
row_start_min = 2; % minimum is 2 (row 1 contains the variable names)
row_end_final = Inf; % to continue until end of file, use Inf
chunk = 10000; % # of rows in each data grab
count = 0; % for display while matlab is running


interval = 1; % # of seconds to wait before looking for a second jump
min_airtime = 0.2; % shortest jump time to look for (sec)
max_airtime = 1; % longest jump time to look for
% num_players = 2; % number of players with data in selected data file
db = categorical({'-'}); % database of who's had any amount data imported

%% Data Grab Loop
for row_start = row_start_min : chunk : row_end_final 
    count = count + 1;
    row_end = row_start + chunk;
    
    
    if inst; disp('importing data for...'); end
    data = importfile1(filename, [row_start, row_end]);
    if isempty(data)
        break % break the overall 'for loop' if all data is already processed
    end
    if inst; disp(categories(data.name)); end % display the player names in this data grab
    data.ay = -1 * data.ay; % make the y-axis accel. data positive up
    data.t = datetime(data.t, 'InputFormat', 'HH:mm:ss.SS', 'Format',...
        'HH:mm:ss.SS'); % convert time 'strings' to 'datetime' datatype
    s = size(data, 1); % size of the 1st dimension of data
    data.v = zeros(s, 1); % preallocate velocity data with zeros
    if inst; disp('starting integration'); end
    for i = 1:s-1
        data.v(i) = trapz(data.ay(i:i+1)); % calculate v from a
    end
    if inst; disp('integration complete'); end
    
    %% Post data grab
    names = categories(data.name); % names in data are 'categorical'
    % datatype in an array of 'cell' datatype
    ending = matlab.lang.makeValidName(names); % make names a valid matlab
    % variable name (no spaces)
    prefix = cell(size(names,1), 1); % create empty array of 'cell' datatype
    prefix(:) = {'data_'};
    varnames = strcat(prefix, ending); % concatenate strings in these 2
    % 'cell' arrays
    % col = [4 12 21]; % (match_data.csv) grab columns for t, ay, and v
    col = [2 13 18]; % (for data from 2020-5-22)
    
    for n = 1:size(names,1) % loop through each player with data in this
        % set / grab
        
        % if data_playername table doesn't exist as a variable
        if ~exist(varnames{n}, 'var')
            % Create a table of data for that player
            assignin('base', varnames{n}, data(data.name == string(names{n}), col));
        else
            % if data_playername already exists as a table, concatenate new data
            % onto or "under" the existing data
            assignin('base', varnames{n}, [eval(varnames{n}); data(data.name == string(names{n}), col)]);
            
        end
        % after bringing any amount of data for a particular player, add
        % their name to the database of names
        if ~contains(string(db(:)), names{n})
            db = addcats(db, names(n));
        end
        
        if n == size(names,1)
            if inst
                disp('Players with any amount of data imported:')
                disp(categories(db))
            end
        end
    end
end % end of data grab loop




%% Nested Function

function data = importfile1(filename, dataLines)
%IMPORTFILE1 Import data from a text file
%  DATA = IMPORTFILE1(FILENAME) reads data from text file FILENAME for
%  the default selection.  Returns the data as a table.
%
%  DATA = IMPORTFILE1(FILE, DATALINES) reads data for the specified row
%  interval(s) of text file FILENAME. Specify DATALINES as a positive
%  scalar integer or a N-by-2 array of positive scalar integers for
%  dis-contiguous row intervals.
%
%  Example:
%  data = importfile1("2020-05-22-Arreaga-RawDataExportExtended.csv", [2, 100]);
%
%  See also READTABLE.
%
% Auto-generated by MATLAB on 23-May-2020 12:20:35

%% Input handling

% If dataLines is not specified, define defaults
if nargin < 2
    dataLines = [2, Inf];
end

%% Setup the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 17);

% Specify range and delimiter
opts.DataLines = dataLines;
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["name", "t", "lat", "lon", "speed", "HR", "h_acc", "h_dop", "signal_quality", "num_sat", "a_impulse", "ax", "ay", "az", "gx", "gy", "gz"];
opts.VariableTypes = ["categorical", "string", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, "t", "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["name", "t"], "EmptyFieldRule", "auto");

% Import the data
data = readtable(filename, opts);

end

%% EOF (end of file)